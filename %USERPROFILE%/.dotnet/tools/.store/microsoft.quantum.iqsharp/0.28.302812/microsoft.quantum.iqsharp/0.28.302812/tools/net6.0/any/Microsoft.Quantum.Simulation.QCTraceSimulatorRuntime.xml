<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime</name>
    </assembly>
    <members>
        <member name="F:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.CallGraphEdge.CallGraphRoot">
            <summary>
            Name of the root element of the call graph. OperationCallerName
            must be equal to this value for all top-level operations.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.DepthCounter.CompareAsQubitTimeMetricsByStartTime(System.Object,System.Object)">
            <summary>
            Compare objects assuming they are QubitTimeMetrics. Compare by StartTime.
            </summary>
        </member>
        <member name="P:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.DepthCounter.NeedsTracingDataInQubits">
            <summary>
            Part of implementation of <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IQCTraceSimulatorListener"/> interface. See the interface documentation for more details.
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.DistinctInputsCheckerConfiguration">
            <summary>
            Used by <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.DistinctInputsChecker"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.DistinctInputsCheckerConfiguration.ThrowOnNonDistinctQubits">
            <summary>
            If set to true, <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.DistinctInputsCheckerException"/> will be thrown every time non-distinct input qubits are detected.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.DistinctInputsCheckerConfiguration.OperationsToIgnore">
            <summary>
            Operations for which distinct inputs check should not be performed.
            There are potentially cases when one might need to disable this check, but we expect them to be extremely rare.
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.DistinctInputsCheckerResults">
            <summary>
            Used by <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.DistinctInputsChecker"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.DistinctInputsCheckerResults.nonDistinctInputsEventTotalCount">
            <summary>
            Number of times non-distinct inputs to the operation were detected
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.DistinctInputsChecker">
            <summary>
            <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.QCTraceSimulatorCore"/> listener that checks that qubits passed to operations are distinct.
            TODO: reference the section of the spec discussing the ramifications of passing non-distinct qubits to operations.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.DistinctInputsChecker.DistinctQubitsCheck(System.Object[])">
            <summary>
            Check if the id's of qubits contained in qubitsTraceData are all distinct. 
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.DistinctInputsChecker.NewTracingData(System.Int64)">
            <summary>
            Part of implementation of <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IQCTraceSimulatorListener"/> interface. See the interface documentation for more details.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.DistinctInputsChecker.OnAllocate(System.Object[])">
            <summary>
            Part of implementation of <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IQCTraceSimulatorListener"/> interface. See the interface documentation for more details.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.DistinctInputsChecker.OnBorrow(System.Object[],System.Int64)">
            <summary>
            Part of implementation of <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IQCTraceSimulatorListener"/> interface. See the interface documentation for more details.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.DistinctInputsChecker.OnOperationEnd(System.Object[])">
            <summary>
            Part of implementation of <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IQCTraceSimulatorListener"/> interface. See the interface documentation for more details.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.DistinctInputsChecker.OnOperationStart(Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.HashedString,Microsoft.Quantum.Simulation.Core.OperationFunctor,System.Object[])">
            <summary>
            Part of implementation of <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IQCTraceSimulatorListener"/> interface. See the interface documentation for more details.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.DistinctInputsChecker.OnPrimitiveOperation(System.Int32,System.Object[],System.Double)">
            <summary>
            Part of implementation of <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IQCTraceSimulatorListener"/> interface. See the interface documentation for more details.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.DistinctInputsChecker.OnRelease(System.Object[])">
            <summary>
            Part of implementation of <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IQCTraceSimulatorListener"/> interface. See the interface documentation for more details.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.DistinctInputsChecker.OnReturn(System.Object[],System.Int64)">
            <summary>
            Part of implementation of <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IQCTraceSimulatorListener"/> interface. See the interface documentation for more details.
            </summary>
        </member>
        <member name="P:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.DistinctInputsChecker.NeedsTracingDataInQubits">
            <summary>
            Part of implementation of <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IQCTraceSimulatorListener"/> interface. See the interface documentation for more details.
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.DistinctInputsCheckerException">
            <summary>
            This exception is thrown when the input to an 
            operation contains multiple qubits with the same ID.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.DistinctInputsCheckerException.#ctor">
            <summary>
            Creates an instance of <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.DistinctInputsCheckerException"/>
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.InvalidatedQubitsUseCheckerException">
            <summary>
            This exception is thrown when a qubit input to the operation has already been released or returned. 
            Qubits are released at the end of a Q# <c>using</c> statement
            and returned at the end of a Q# <c>borrowing</c> statement.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.InvalidatedQubitsUseCheckerException.#ctor">
            <summary>
            Creates an instance of <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.InvalidatedQubitsUseCheckerException"/>
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.QubitTimeMetricsException">
            <summary>
            This exception is thrown when inconsistencies in the recording of qubit metrics are detected.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.QubitTimeMetricsException.#ctor">
            <summary>
            Creates an instance of <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.QubitTimeMetricsException"/>
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.UnconstrainedMeasurementException">
            <summary>
            This exception is thrown when a measurement is performed, but has not been annotated using
            a call to either <c>Microsoft.Quantum.Intrinsic.AssertProb</c> or
            <c>Microsoft.Quantum.Intrinsic.Assert</c>.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.UnconstrainedMeasurementException.#ctor">
            <summary>
            Creates an instance of <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.UnconstrainedMeasurementException"/>
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.PrimitiveOperationsCounter.globalCounters">
            <summary>
            Number of primitive operations performed since the beginning of the execution.
            Double type is used because all the collected statistics are of type double.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.PrimitiveOperationsCounter.#ctor(Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.PrimitiveOperationsCounterConfiguration,Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IDoubleStatistic[])">
            <param name="statisticsToCollect">
            Statistics to be collected. If set to null, the
            statistics returned by <see cref="!:StatisticsCollector.DefaultStatistics"/>
            are used. </param>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.PrimitiveOperationsCounter.OnAllocate(System.Object[])">
            <summary>
            Part of implementation of <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IQCTraceSimulatorListener"/> interface. See the interface documentation for more details.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.PrimitiveOperationsCounter.OnRelease(System.Object[])">
            <summary>
            Part of implementation of <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IQCTraceSimulatorListener"/> interface. See the interface documentation for more details.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.PrimitiveOperationsCounter.OnBorrow(System.Object[],System.Int64)">
            <summary>
            Part of implementation of <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IQCTraceSimulatorListener"/> interface. See the interface documentation for more details.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.PrimitiveOperationsCounter.OnReturn(System.Object[],System.Int64)">
            <summary>
            Part of implementation of <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IQCTraceSimulatorListener"/> interface. See the interface documentation for more details.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.PrimitiveOperationsCounter.OnPrimitiveOperation(System.Int32,System.Object[],System.Double)">
            <summary>
            Part of implementation of <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IQCTraceSimulatorListener"/> interface. See the interface documentation for more details.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.PrimitiveOperationsCounter.OnOperationStart(Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.HashedString,Microsoft.Quantum.Simulation.Core.OperationFunctor,System.Object[])">
            <summary>
            Part of implementation of <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IQCTraceSimulatorListener"/> interface. See the interface documentation for more details.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.PrimitiveOperationsCounter.OnOperationEnd(System.Object[])">
            <summary>
            Part of implementation of <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IQCTraceSimulatorListener"/> interface. See the interface documentation for more details.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.PrimitiveOperationsCounter.NewTracingData(System.Int64)">
            <summary>
            Part of implementation of <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IQCTraceSimulatorListener"/> interface. See the interface documentation for more details.
            </summary>
        </member>
        <member name="P:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.PrimitiveOperationsCounter.NeedsTracingDataInQubits">
            <summary>
            Part of implementation of <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IQCTraceSimulatorListener"/> interface. See the interface documentation for more details.
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.ICSVColumns">
            <summary>
            Indicates that a type can be serialized as columns of a CSV file.
            </summary>
        </member>
        <member name="P:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.ICSVColumns.Count">
            <summary>
            Number of columns
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.ICSVColumns.GetColumnNames">
            <summary>
            Column names.  Must be of length <see cref="P:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.ICSVColumns.Count"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.ICSVColumns.GetRow">
            <summary>
            Row corresponding to given type values. Must be of length <see cref="P:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.ICSVColumns.Count"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IDoubleStatistic">
            <summary>
            Interface used to collect statistics ( usually in a streaming fashion ).
            See <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.MomentsStatistic"/> and <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.MinMaxStatistic"/> for examples of the implementation.
            </summary>
        </member>
        <member name="P:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IDoubleStatistic.StatisticsCount">
            <summary>
            Number of statistics being collected by given class
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IDoubleStatistic.GetStatisticsNames">
            <summary>
            Returns the names of the collected statistics. The length of the array is <see cref="P:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IDoubleStatistic.StatisticsCount"/>
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IDoubleStatistic.GetStatistics">
            <summary>
            Values of the observed statistics. The length of the array is <see cref="P:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IDoubleStatistic.StatisticsCount"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IDoubleStatistic.GetNewInstance">
            <summary>
            New instance of the class implementing the interface that contains zero samples. 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.Extensions">
            <summary>
            Extensions related to <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IDoubleStatistic"/>
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.Extensions.GetStatisticsNames(System.Collections.Generic.IEnumerable{Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IDoubleStatistic})">
            <summary>
            Concatenates statistics names
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.Extensions.GetStatistics(System.Collections.Generic.IEnumerable{Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IDoubleStatistic})">
            <summary>
            Concatenates statistics values
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.InvalidatedQubitsUseCheckerConfiguration">
            <summary>
            Used by <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.InvalidatedQubitsUseChecker"/>. 
            See the <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.InvalidatedQubitsUseChecker"/> for the definition of invalidated qubit.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.InvalidatedQubitsUseCheckerConfiguration.ThrowOnInvalidatedQubitUse">
            <summary>
            If set to true, the <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.InvalidatedQubitsUseCheckerException"/> is thrown.
            Otherwise total number of non-distinct qubit inputs is collected.
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.InvalidatedQubitsUseCheckerResults">
            <summary>
            Used by <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.InvalidatedQubitsUseChecker"/>. 
            See the <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.InvalidatedQubitsUseChecker"/> for the definition of invalidated qubit.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.InvalidatedQubitsUseCheckerResults.InvalidatedQubitsUseCount">
            <summary>
            Number of efforts to use invalidated qubits that has been detected.
            See the <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.InvalidatedQubitsUseChecker"/> for the definition of invalidated qubit.
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.InvalidatedQubitsUseChecker">
            <summary>
            Checks if the qubits input to the operation has been invalidated.
            Qubits are invalidated when they are returned or released. 
            Qubits are released in the end of using block and returned in the end of borrowing block.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.InvalidatedQubitsUseChecker.NewTracingData(System.Int64)">
            <summary>
            Part of implementation of <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IQCTraceSimulatorListener"/> interface. See the interface documentation for more details.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.InvalidatedQubitsUseChecker.OnAllocate(System.Object[])">
            <summary>
            Part of implementation of <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IQCTraceSimulatorListener"/> interface. See the interface documentation for more details.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.InvalidatedQubitsUseChecker.OnBorrow(System.Object[],System.Int64)">
            <summary>
            Part of implementation of <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IQCTraceSimulatorListener"/> interface. See the interface documentation for more details.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.InvalidatedQubitsUseChecker.OnOperationEnd(System.Object[])">
            <summary>
            Part of implementation of <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IQCTraceSimulatorListener"/> interface. See the interface documentation for more details.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.InvalidatedQubitsUseChecker.OnOperationStart(Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.HashedString,Microsoft.Quantum.Simulation.Core.OperationFunctor,System.Object[])">
            <summary>
            Part of implementation of <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IQCTraceSimulatorListener"/> interface. See the interface documentation for more details.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.InvalidatedQubitsUseChecker.OnPrimitiveOperation(System.Int32,System.Object[],System.Double)">
            <summary>
            Part of implementation of <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IQCTraceSimulatorListener"/> interface. See the interface documentation for more details.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.InvalidatedQubitsUseChecker.OnRelease(System.Object[])">
            <summary>
            Part of implementation of <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IQCTraceSimulatorListener"/> interface. See the interface documentation for more details.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.InvalidatedQubitsUseChecker.OnReturn(System.Object[],System.Int64)">
            <summary>
            Part of implementation of <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IQCTraceSimulatorListener"/> interface. See the interface documentation for more details.
            </summary>
        </member>
        <member name="P:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.InvalidatedQubitsUseChecker.NeedsTracingDataInQubits">
            <summary>
            Part of implementation of <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IQCTraceSimulatorListener"/> interface. See the interface documentation for more details.
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IQCTraceSimulatorListener">
            <summary>
            The interface used to receive notifications about events from <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.QCTraceSimulatorCore"/>.
            See <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.DistinctInputsChecker"/> for a simple example of a class implementing this interface. 
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IQCTraceSimulatorListener.OnAllocate(System.Object[])">
            <summary>
            Called every time qubits are allocated by the <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.QCTraceSimulatorCore"/>
            </summary>
            <param name="qubitsTraceData"> Data attached to allocated qubits. Each instance of the attached data is created by the call to <see cref="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IQCTraceSimulatorListener.NewTracingData(System.Int64)"/></param>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IQCTraceSimulatorListener.OnRelease(System.Object[])">
            <summary>
            Called every time qubits are released by the <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.QCTraceSimulatorCore"/>
            </summary>
            <param name="qubitsTraceData"> Data attached to released qubits. Each instance of the attached data is created by the call to <see cref="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IQCTraceSimulatorListener.NewTracingData(System.Int64)"/></param>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IQCTraceSimulatorListener.OnBorrow(System.Object[],System.Int64)">
            <summary>
            Called every time qubits are borrowed by the <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.QCTraceSimulatorCore"/>
            </summary>
            <param name="qubitsTraceData"> Data attached to borrowed qubits. Each instance of the attached data is created by the call to <see cref="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IQCTraceSimulatorListener.NewTracingData(System.Int64)"/></param>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IQCTraceSimulatorListener.OnReturn(System.Object[],System.Int64)">
            <summary>
            Called every time qubits are returned by the <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.QCTraceSimulatorCore"/>
            </summary>
            <param name="qubitsTraceData"> Data attached to returned qubits. Each instance of the attached data is created by the call to <see cref="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IQCTraceSimulatorListener.NewTracingData(System.Int64)"/></param>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IQCTraceSimulatorListener.OnPrimitiveOperation(System.Int32,System.Object[],System.Double)">
            <summary>
            Called every time primitive operation is executed by <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.QCTraceSimulatorCore"/>
            </summary>
            <param name="qubitsTraceData"> Data attached to qubits passed to the operation. Each instance of the attached data is created by the call to <see cref="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IQCTraceSimulatorListener.NewTracingData(System.Int64)"/></param>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IQCTraceSimulatorListener.OnOperationStart(Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.HashedString,Microsoft.Quantum.Simulation.Core.OperationFunctor,System.Object[])">
            <summary>
            Called before an operation is going to be executed by <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.QCTraceSimulatorCore"/>
            </summary>
            <param name="name">Name of the operation that is going to be executed</param>
            <param name="qubitsTraceData"> Data attached to qubits passed to the operation. Each instance of the attached data is created by the call to <see cref="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IQCTraceSimulatorListener.NewTracingData(System.Int64)"/>.
            If <see cref="P:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IQCTraceSimulatorListener.NeedsTracingDataInQubits"/> returns false this argument will be null. </param>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IQCTraceSimulatorListener.OnOperationEnd(System.Object[])">
            <summary>
            Called after an operation was executed by <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.QCTraceSimulatorCore"/>
            </summary>
            <param name="qubitsTraceData"> Data attached to the returned qubits. Each instance of the attached data is created by the call to <see cref="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IQCTraceSimulatorListener.NewTracingData(System.Int64)"/></param>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IQCTraceSimulatorListener.NewTracingData(System.Int64)">
            <summary>
            Returns an object containing data that the listener would like to attach to the given qubit.
            </summary>
            <param name="qubitId">Id of the qubit to which the data is going to be attached to.</param>
        </member>
        <member name="P:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IQCTraceSimulatorListener.NeedsTracingDataInQubits">
            <summary>
            Returns true if the listener needs tracing data associated to each qubit.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.MeasurementConstraint.ConstraintType.Assert">
            <summary>
            Indicates that constraint corresponds to the assertion that given
            measurement outcome should happen with given probability. Assertion
            is the fact that the user knows about the computation they are writing.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.MeasurementConstraint.ConstraintType.Force">
            <summary>
            Indicates that constraint corresponds to the user wanting to enforce
            the measurement outcome for debugging purposes. User does not know that
            this particular outcome will happen, but they want to observe execution path
            when this outcome happens.
            </summary>
        </member>
        <member name="P:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.MeasurementConstraint.Observable">
            <summary>
            The observable being measured
            </summary>
        </member>
        <member name="P:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.MeasurementConstraint.ConstrainToResult">
            <summary>
            The measurement outcome that should be forced or
            should happen with the given probability
            </summary>
        </member>
        <member name="P:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.MeasurementConstraint.Probability">
            <summary>
            Probability with which asserted outcome should happen.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.MeasurementConstraint.ZeroStateAssert">
            <summary>
            Returns measurement constraint object corresponding to
            a given qubit being in zero state
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.MeasurementConstraint.ForceMeasurement(System.Collections.Generic.List{Microsoft.Quantum.Simulation.Core.Pauli},Microsoft.Quantum.Simulation.Core.Result)">
            <summary>
            Returns measurement constraint corresponding to the user enforcing given outcome.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.MeasurementConstraint.AssertMeasurement(System.Collections.Generic.List{Microsoft.Quantum.Simulation.Core.Pauli},Microsoft.Quantum.Simulation.Core.Result,System.Double)">
            <summary>
            Returns measurement constraint corresponding to user asserting that given measurement should
            happen with given probability.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.MomentsStatistic.count">
            <summary>
            Number of samples collected
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.MultivariableRecord">
            <summary>
            Collects statistics for multiple random variables. Used by <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.StatisticsCollector`1"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.QCTraceSimulatorCoreConfiguration.ThrowOnUnconstrainedMeasurement">
            <summary>
            If set to true,  TracingSimulatorCore will throw an exception every time there is a
            measurement that has not been annotated via AssertProb or DebugForceMeasure.
            This is mainly useful in combination with interactive debugging. This way it is easier
            to identify all the measurements that have not been annotated and fix them.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.QCTraceSimulatorCoreConfiguration.CallStackDepthLimit">
            <summary>
            Bounds the call stack depth for which information per call graph edge is stored.
            The depth of a given node in the call graph is the distance from the node to the root
            of the call graph.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.QCTraceSimulatorCoreConfiguration.OptimizeDepth">
            <summary>
            Controls if depth or width optimization is favored.
            If set to true, resulting circuit is optimized for depth by discouraging qubit reuse.
            If set to false, resulting circuit is optimized for width by encouraging qubit reuse.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.QCTraceSimulatorCore" -->
        <member name="F:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.QCTraceSimulatorCore.randomGenerator">
            <summary>
            Random number generator used to sample measurement outcomes according to the
            probability distribution specified by user.
            </summary>
        </member>
        <member name="P:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.QCTraceSimulatorCore.NumberOfUnconstrainedMeasurements">
            <summary>
            Number of unconstrained measurements that happened during execution.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.QCTraceSimulatorCore.Measure(Microsoft.Quantum.Simulation.Core.IQArray{Microsoft.Quantum.Simulation.Core.Pauli},Microsoft.Quantum.Simulation.Core.IQArray{Microsoft.Quantum.Simulation.Core.Qubit})">
            <summary>
            Implements the Q# standard library callable Measure.
            Not all measurements considered primitive operations. The measurements
            that are primitive operations are listed in
            MetricsCalculatorConfiguration.MeasurementToPrimitiveOperation
            If the measurement is not primitive, the operation will throw
            NonPrimitiveMeasurementException.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.QCTraceSimulatorCore.Assert(Microsoft.Quantum.Simulation.Core.IQArray{Microsoft.Quantum.Simulation.Core.Pauli},Microsoft.Quantum.Simulation.Core.IQArray{Microsoft.Quantum.Simulation.Core.Qubit},Microsoft.Quantum.Simulation.Core.Result)">
            <summary>
            Implements the Q# standard library callable Assert```
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.QCTraceSimulatorCore.AssertProb(Microsoft.Quantum.Simulation.Core.IQArray{Microsoft.Quantum.Simulation.Core.Pauli},Microsoft.Quantum.Simulation.Core.IQArray{Microsoft.Quantum.Simulation.Core.Qubit},Microsoft.Quantum.Simulation.Core.Result,System.Double)">
            <summary>
            Implements the Q# standard library callable AssertProb
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.QCTraceSimulatorCore.ForceMeasure(Microsoft.Quantum.Simulation.Core.IQArray{Microsoft.Quantum.Simulation.Core.Pauli},Microsoft.Quantum.Simulation.Core.IQArray{Microsoft.Quantum.Simulation.Core.Qubit},Microsoft.Quantum.Simulation.Core.Result)">
            <summary>
            Ensures that measurement of given observable on given qubits will
            lead to result given by value
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.QCTraceSimulatorCore.InvalidateConstraints(System.Collections.Generic.IReadOnlyList{Microsoft.Quantum.Simulation.Core.Qubit})">
            <summary>
            Notifies qubits involved in Primitive operation that they have been modified.
            Performs calls runtime checker for distinct qubits input check.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.QCTraceSimulatorCore.DoPrimitiveOperation(System.Int32,Microsoft.Quantum.Simulation.Core.IQArray{Microsoft.Quantum.Simulation.Core.Qubit},System.Double,System.Boolean)">
            <summary>
            Callback for primitive operations
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.QCTraceSimulatorCore.OnOperationStart(Microsoft.Quantum.Simulation.Core.ICallable,Microsoft.Quantum.Simulation.Core.IApplyData)">
            <summary>
            Callback to notify tracer that an operation execution has started.
            Passes callBack down to metricsCalculator and runtimeChecker.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.QCTraceSimulatorCore.OnOperationEnd(Microsoft.Quantum.Simulation.Core.ICallable,Microsoft.Quantum.Simulation.Core.IApplyData)">
            <summary>
            Callback to notify tracer that an operation execution has ended.
            Passes callBack down to metricsCalculator and runtimeChecker.
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.QubitAvailabilityTimeTracker">
            <summary>
            Tracks time when qubits were last used and therefore, time when qubits become available.
            Tracking is done by qubit id, which survives during reuse of qubit.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.QubitAvailabilityTimeTracker.DefaultAvailabilityTime">
            <summary>
            Availability time of all qubits starts at 0.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.QubitAvailabilityTimeTracker.QubitAvailableAt">
            <summary>
            This tracks time when a qubit was last used, indexed by qubit id.
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.QubitConstraint">
            <summary>
            Holds data describing measurement constraint associated to a 
            given qubit at a given execution moment. 
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.QubitConstraint.OnUseQubit">
            <summary>
            If qubit was used, in other words some unitary or measurement were applied to it, 
            the constraint gets invalidated.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.QubitConstraint.OnRelease">
            <summary>
            Released qubits assumed to be in a zero state
            </summary>
        </member>
        <member name="P:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.QubitConstraint.QubitPauli">
            <summary>
            Pauli in the constraint assigned to this qubit
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.QubitTimeMetrics">
            <summary>
            Used by <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.DepthCounter"/>
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.ComplexTime">
            <summary>
            Either length of a time interval or a point in time on the timeline of the program.
            </summary>
        </member>
        <member name="P:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.ComplexTime.DepthTime">
            <summary>
            Tracer configuration interface uses type "double" to provide duration of gates (aka depth).
            When a gate is performed, time advances by the depth of the gate. DepthTime is used to count
            time cosistent with the depth configuration settings. As a result, if a gate time is set to zero,
            DepthTime won't increase after such gate is performed.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.ComplexTime.TrailingZeroDepthGateCount">
            <summary>
            TrailingZeroDepthGateCount counts number of zero-depth gates after last non-zero depth gate is performed.
            Generally, gates that happen later on a qubit cannot be scheduled before gates on the same qubit.
            This is tracked transitively via qubit availability time, but zero-depth gates do not allow such calculation.
            The situation is resolved by having this time component - TrailingZeroDepthGateCount.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.ComplexTime.AdvanceBy(System.Double)">
            <summary>
            Add gate time to availability time. If gate time is zero, advance dependency time.
            </summary>
            <param name="gateTime">Gate time to advance by. Assumed to be set from literals so comparison with 0 should be precise.</param>
            <returns>ComplexTime advanced by provided gate time</returns>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.ComplexTime.Subtract(Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.ComplexTime)">
            <summary>
            Subtracts argument ComplexTime from "this" ComplexTime. Returns the result.
            Depth times are assumed to be precise for comparison.
            </summary>
            <param name="time">Time to subtract from this object.</param>
            <returns>Result of subtraction.</returns>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.ComplexTime.Compare(Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.ComplexTime,Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.ComplexTime)">
            <summary>
            Compares two complex times. First DepthTime is compared, then TrailingZeroDepthGateCount is compared.
            </summary>
            <returns>0 when a = b, -1 when a&lt; b, and 1 when a &gt; b</returns>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.ComplexTime.IsEqualTo(Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.ComplexTime)">
            <summary>
            Returns true if this ComplexTime is the same as the argument.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.ComplexTime.Min(Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.ComplexTime,Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.ComplexTime)">
            <summary>
            Finds smallest of the two ComplexTime arguments.
            </summary>
            <returns>Smallest of the two arguments according to comparison.</returns>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.ComplexTime.Max(Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.ComplexTime,Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.ComplexTime)">
            <summary>
            Finds largest of the two ComplexTime arguments.
            </summary>
            <returns>Largest of the two arguments according to comparison.</returns>
        </member>
        <member name="P:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.ComplexTime.MinValue">
            <summary>
            Minimal value of ComplexTime.
            </summary>
        </member>
        <member name="P:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.ComplexTime.MaxValue">
            <summary>
            Maximum value of ComplexTime.
            </summary>
        </member>
        <member name="P:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.ComplexTime.Zero">
            <summary>
            Zero ComplexTime.
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.SortedQubitPool">
            <summary>
            Stores qubits sorted by corresponding ComplexTime values. For example, a ComplexTime value that correponds to a qubit
            could be the qubit availability time: the end time of the last gate on the qubit.
            Supports queries to retrieve qubit with maximum time less than given and minimum time greater than given Sample.
            Also supports addition (Add) and removal (Remove) of qubits identified by time. Time is <c>ComplexTime</c>.
            Multiple entries per time is supported. Implemented via SortedSet.
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.SortedQubitPool.QubitTimeNode">
            <summary>
            Auxilliary class to be placed into SortedSet, which is sorted by time.
            We use class rather than record because we want to be able to compare by reference.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.SortedQubitPool.QubitTimeNode.QubitId">
            <summary>
            Id of a qubit which this record represents
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.SortedQubitPool.QubitTimeNode.Time">
            <summary>
            Time on which these nodes are sorted.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.SortedQubitPool.QubitTimeNode.NextNode">
            <summary>
            Multiple nodes can correspond to the same time. They are added to the linked list via this field.
            If qubits with the same time are common, array may be more efficient than the linked list.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.SortedQubitPool.QubitTimeNode.#ctor">
            <summary>
            This is only used for Sample.
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.SortedQubitPool.VisitingComparer">
            <summary>
            Compares two QubitTimeNode objects for SortedSet.
            It also collects minimum and maximum Time value of nodes been compared to the
            sample Time since ResetForComparison is called.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.SortedQubitPool.VisitingComparer.MaxLowerBound">
            <summary>
            Maximum of all values, that are less than or equal than sample, among values seen after reset.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.SortedQubitPool.VisitingComparer.MinUpperBound">
            <summary>
            Minimum of all values, that are greater or equal than sample, among values seen after reset.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.SortedQubitPool.VisitingComparer.Sample">
            <summary>
            Sample, that will be passed to a series of comparisons.
            Sample is not an object that's stored in the set so it is excluded from the values seen.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.SortedQubitPool.VisitingComparer.ResetForComparison(Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.SortedQubitPool.QubitTimeNode)">
            <summary>
            Resets minimum and maximum value of nodes seen from the set.
            Also sets sample object, which should not be counted because it is not an object from the set.
            </summary>
            <param name="sample">Sample object that is not considered for minimum and maximum.</param>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.SortedQubitPool.VisitingComparer.Compare(Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.SortedQubitPool.QubitTimeNode,Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.SortedQubitPool.QubitTimeNode)">
            <summary>
            Compares Time field of two nodes. Also updates MaxLowerBound and MinUpperBound.
            </summary>
            <returns>Result of comparison of Time field of QubitTimeNode</returns>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.SortedQubitPool.QubitsSortedByTime">
            <summary>
            QubitTimeNodes sorted by Time field. SortedSet won't accept values with the same Time field.
            When QubitPool needs to store multiple qubits with the same Time, additional QubitTimeNode instances
            are linked to the head node from this set.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.SortedQubitPool.NodeComparer">
            <summary>
            Comparer of two nodes, which compares them by Time field and collects additional data.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.SortedQubitPool.Sample">
            <summary>
            Sample which is being compared to the nodes stored in the set.
            Multiple comparisons are done by SortedSet to find if this Sample is present in the set.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.SortedQubitPool.Add(System.Int64,Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.ComplexTime)">
            <summary>
            Add Qubit to the set with specified time. Multiple qubits with the same time can be added.
            Complexity is log(N), where N - number of nodes.
            </summary>
            <param name="qubitId">Id of a qubit to add to the set.</param>
            <param name="time">Time of the qubit.</param>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.SortedQubitPool.FindBound(Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.ComplexTime,System.Boolean,Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.ComplexTime@)">
            <summary>
            Find qubit with the specified time in the set. If such qubit is not present,
            find either maximum value less than it or minimum value greater than it.
            This function uses one call to SortedSet.TryGetValue() so it takes log(N) time, where N - number of nodes.
            </summary>
            <param name="requestedTime">Sample time to find</param>
            <param name="getLowerBound">"true" to find maximum value &lt;= requestedTime, "false" to find minimum value &gt;= requestedTime</param>
            <param name="actualTime">Time found in the set</param>
            <returns>"true" if the requested bound was found in the set, "false" otherwise</returns>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.SortedQubitPool.Remove(Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.ComplexTime)">
            <summary>
            Remove one qubit with given time from the set. Complexity is log(N), where N - number of nodes.
            </summary>
            <param name="time">Remove qubit with this time.</param>
            <returns>QubitId if qubit is found. Throws exception if it is not found.</returns>
        </member>
        <member name="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.CallGraphEdgeRow">
            <summary>
            Data stored per an edge of a call graph
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.CallGraphEdgeRow.KeyRow">
            <summary>
            Array of strings describing an edge of a call graph
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.CallGraphEdgeRow.DataRow">
            <summary>
            Two dimensional array that contains metrics and statistics.
            First index corresponds to a metric, the second to a statistic.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.CallGraphEdgeRow.NumberOfSamples">
            <summary>
            Total number of samples collected per edge of the call-graph
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.CallGraphEdgeTable">
            <summary>
            Simple representations of information collected per edge of a call graph
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.CallGraphEdgeTable.keyColumnNames">
            <summary>
            Names of keys used to identify an edge of the call graph
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.CallGraphEdgeTable.metricNames">
            <summary>
            Metrics collected per edge of a call-graph
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.CallGraphEdgeTable.statisticsNames">
            <summary>
            Statistics collected for each metric.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.CallGraphEdgeTable.rows">
            <summary>
            Data associated to all call-graph edges
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IStatisticCollectorResults`1">
            <summary>
            Intended for reading collected statistics
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IStatisticCollectorResults`1.GetStatistic(`0,System.String,System.String)">
            <summary>
            Gets a statistics for a given key, variable name and statistic name. The array of possible names is returned by 
            <see cref="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IStatisticCollectorResults`1.GetVariablesNamesCopy"/>. The array of possible names is
            returned by <see cref="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IStatisticCollectorResults`1.GetStatisticsNamesCopy"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IStatisticCollectorResults`1.GetStatistics(`0,System.String)">
            <summary>
            Gets array of statistics for a given key and variable name. The list of possible names is returned by 
            <see cref="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IStatisticCollectorResults`1.GetVariablesNamesCopy"/>. Names of statistics corresponding to each array element are 
            returned by <see cref="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IStatisticCollectorResults`1.GetStatisticsNamesCopy"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IStatisticCollectorResults`1.GetStatisticsNamesCopy">
            <summary>
            Returns names of the statistics being collected.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IStatisticCollectorResults`1.GetVariablesNamesCopy">
            <summary>
            Returns names of the variable names for which statistics are collected.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IStatisticCollectorResults`1.ToCSV(System.String)">
            <summary>
            Creates string with all the statistics results in CSV format. 
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IStatisticCollectorResults`1.ToTable">
            <summary>
            Creates a simple data structure with all collected statistics
            </summary>
        </member>
        <member name="P:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.StatisticsCollector`1.Data">
            <summary>
            Keeps track of all data collected so far.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.StatisticsCollector`1.DefaultStatistics">
            <summary>
            Statistic that are going to be collected by default if they were not specified explicitly.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.StatisticsCollector`1.GetStatistics(`0,System.String)">
            <summary>
            Gets array of statistics for a given key and variable name. The list of possible names is returned by 
            <see cref="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.StatisticsCollector`1.GetVariablesNamesCopy"/>. Names of statistics corresponding to each array element are 
            returned by <see cref="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.StatisticsCollector`1.GetStatisticsNamesCopy"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.StatisticsCollector`1.GetStatistic(`0,System.String,System.String)">
            <summary>
            Gets a statistics for a given key, variable name and statistic name. The array of possible names is returned by 
            <see cref="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.StatisticsCollector`1.GetVariablesNamesCopy"/>. The array of possible names is
            returned by <see cref="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.StatisticsCollector`1.GetStatisticsNamesCopy"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.StatisticsCollector`1.GetStatisticsNamesCopy">
            <summary>
            Returns names of the statistics being collected.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.StatisticsCollector`1.GetVariablesNamesCopy">
            <summary>
            Returns names of the variable names for which statistics are collected.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.StatisticsCollector`1.ToCSV(System.String)">
            <summary>
            Creates string with all the statistics results in CSV format. 
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.TraceableQubit">
            <summary>
            TraceableQubit holds data associated with a qubit 
            for runtime checks, metrics collection and measurement constraints tracking.
            Used by <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.TraceableQubitManager"/>
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.TraceableQubit.TraceData">
            <summary>
            Objects attached to the qubit
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.TraceableQubit.#ctor(System.Int32,System.Int32)">
            <param name="traceDataSize">Number of objects that can be attached to each qubit</param>
        </member>
        <member name="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.TraceableQubitFactory">
            <summary>
            TraceableQubitFactory provide common functionality for traceable qubit managers
            to produce qubits with appropriate tracing data.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.TraceableQubitFactory.#ctor(System.Func{System.Int64,System.Object}[])">
            <summary>
            TraceableQubitFactory makes sure that trace data array for qubits 
            is initialized with objects created by qubitTraceDataInitializers callbacks
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.TraceableQubitFactory.CreateQubitObject(System.Int64)">
            <summary>
            Creates qubit object with appropriate tracing data.
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.TraceableQubitManager">
            <summary>
            Qubit manager for TraceableQubit type. Ensures that all the traceable 
            qubits are configured as requested during qubit manage construction.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.TraceableQubitManager.#ctor(System.Boolean)">
            <summary>
            The qubit manager makes sure that trace data array for qubits 
            is initialized with objects created by qubitTraceDataInitializers callbacks
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.RestrictedTraceableQubitManager.#ctor(System.Boolean)">
            <summary>
            The qubit manager makes sure that trace data array for qubits 
            is initialized with objects created by qubitTraceDataInitializers callbacks
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.Utils.PruneObservable(Microsoft.Quantum.Simulation.Core.IQArray{Microsoft.Quantum.Simulation.Core.Pauli},Microsoft.Quantum.Simulation.Core.IQArray{Microsoft.Quantum.Simulation.Core.Qubit},System.Collections.Generic.List{Microsoft.Quantum.Simulation.Core.Pauli}@,System.Collections.Generic.List{Microsoft.Quantum.Simulation.Core.Qubit}@)">
            <summary>
            Removes PauliI terms from observable and corresponding qubits from qubits. 
            Returns the observable description that is equivalent to the original one, but has no PauliI terms
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.Utils.Opposite(Microsoft.Quantum.Simulation.Core.Result)">
            <summary>
            Returns the measurement result that is the opposite to a given one
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.Utils.DeepClone``1(``0)">
            <summary>
            Makes a deep copy of a serializable type. Based on CLR via C#, 4th ed., by J.Richter, page 615 
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.Utils.ExtractTracingData``1(System.Collections.Generic.IReadOnlyList{Microsoft.Quantum.Simulation.Core.Qubit},System.Int32)">
            <summary>
            Extracts tracing data from array of qubit with index data_id
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.Utils.ExtractTracingData``1(Microsoft.Quantum.Simulation.Core.Qubit[])">
            <summary>
            Extracts tracing data from array of qubit. Goes through all types attached to the qubits and tries to find 
            a record of type <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.Utils.ExtractTracingDataBulk(System.Collections.Generic.IReadOnlyList{Microsoft.Quantum.Simulation.Core.Qubit},System.Int32,System.Int32)">
            <summary>
            Extracts arrays of data attached to array of qubits and performs the transpose.
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.HashedString">
            <summary>
            Equivalent of string type that stores its hash
            Warning!!!: hash code will not be recomputed if member data is changed
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.WidthCounter">
            <summary>
            Collects statistics about number of qubits used
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.WidthCounter.OnReturn(System.Object[],System.Int64)">
            <summary>
            Part of implementation of <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IQCTraceSimulatorListener"/> interface. See the interface documentation for more details.
            </summary>
        </member>
        <member name="P:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.WidthCounter.NeedsTracingDataInQubits">
            <summary>
            Part of implementation of <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IQCTraceSimulatorListener"/> interface. See the interface documentation for more details.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.Common.QubitManagerRestrictedReuse.None">
            <summary>
            The end of free lists are marked with None value. It is used like null for pointers.
            This value is non-negative just like other values in the free lists.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.Common.QubitManagerRestrictedReuse.Allocated">
            <summary>
            Explicitly allocated qubits are marked with Allocated value.
            Qubits implicitly allocated for borrowing are "refcounted" with values [Allocated+1 .. -2].
            When refcount needs to be decreased to Allocated value, the qubit is automatically released.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.Common.QubitManagerRestrictedReuse.Disabled">
            <summary>
            Disabled qubits are marked with this value.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.Common.QubitManagerRestrictedReuse.SharedQubitStatusArray">
            <summary>
            Tracks allocation state of all qubits. Stores lists of free qubits.
            QubitCapacity is always equal to array size.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.Common.QubitManagerRestrictedReuse.Disable(Microsoft.Quantum.Simulation.Core.Qubit)">
            <summary>
            Disables a given qubit.
            Once a qubit is disabled it can never be "enabled" or reallocated.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.Common.QubitManagerRestrictedReuse.Disable(Microsoft.Quantum.Simulation.Core.IQArray{Microsoft.Quantum.Simulation.Core.Qubit})">
            <summary>
            Disables a set of given qubits.
            Once a qubit is disabled it can never be "enabled" or reallocated.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.Common.QubitManagerRestrictedReuse.Allocate">
            <summary>
            Allocates a qubit.
            Throws a NotEnoughQubits exception if the qubit cannot be allocated. 
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.Common.QubitManagerRestrictedReuse.Allocate(System.Int64)">
            <summary>
            Allocates numToAllocate new qubits.
            Throws a NotEnoughQubits exception without allocating any qubits if the qubits cannot be allocated. 
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.Common.QubitManagerRestrictedReuse.AllocatedIds">
            <summary>
            Returns all allocated qubit ids. Disabled qubits are also returned. (is this OK?)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.Common.QubitManagerRestrictedReuse.Release(Microsoft.Quantum.Simulation.Core.Qubit)">
            <summary>
            Releases a given qubit.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.Common.QubitManagerRestrictedReuse.Release(Microsoft.Quantum.Simulation.Core.IQArray{Microsoft.Quantum.Simulation.Core.Qubit})">
            <summary>
            Releases a set of given qubits.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.Common.QubitManagerRestrictedReuse.CreateQubitObject(System.Int64)">
            <summary>
            May be overriden to create a custom Qubit object of a derived type.
            </summary>
            <param name="id">unique qubit id</param>
            <returns>a newly instantiated qubit</returns>
        </member>
    </members>
</doc>
