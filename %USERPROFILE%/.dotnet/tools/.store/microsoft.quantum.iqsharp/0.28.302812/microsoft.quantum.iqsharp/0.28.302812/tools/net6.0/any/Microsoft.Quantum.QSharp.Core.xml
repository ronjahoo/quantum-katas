<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Quantum.QSharp.Core</name>
    </assembly>
    <members>
        <member name="M:Microsoft.Quantum.Intrinsic.CNOT.GetRuntimeMetadata(Microsoft.Quantum.Simulation.Core.IApplyData)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Quantum.Intrinsic.CCNOT.GetRuntimeMetadata(Microsoft.Quantum.Simulation.Core.IApplyData)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Quantum.Intrinsic.M.GetRuntimeMetadata(Microsoft.Quantum.Simulation.Core.IApplyData)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Quantum.Intrinsic.ResetAll.GetRuntimeMetadata(Microsoft.Quantum.Simulation.Core.IApplyData)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Quantum.Measurement.MResetX.GetRuntimeMetadata(Microsoft.Quantum.Simulation.Core.IApplyData)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Quantum.Measurement.MResetY.GetRuntimeMetadata(Microsoft.Quantum.Simulation.Core.IApplyData)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Quantum.Measurement.MResetZ.GetRuntimeMetadata(Microsoft.Quantum.Simulation.Core.IApplyData)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Quantum.Simulation.QuantumProcessor.QuantumProcessorDispatcher">
            <summary>
            Dispatcher (Simulator) that redirects all the calls to a class implementing <see cref="T:Microsoft.Quantum.Simulation.Common.IQuantumProcessor"/> interface.
            </summary>
        </member>
        <member name="P:Microsoft.Quantum.Simulation.QuantumProcessor.QuantumProcessorDispatcher.QuantumProcessor">
            <summary>
            An instance of a class implementing <see cref="T:Microsoft.Quantum.Simulation.Common.IQuantumProcessor"/> interface that this simulator wraps.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.QuantumProcessor.QuantumProcessorDispatcher.#ctor(Microsoft.Quantum.Simulation.Common.IQuantumProcessor,Microsoft.Quantum.Simulation.Common.IQubitManager,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            
            </summary>
            <param name="quantumProcessor">An instance of a class implementing <see cref="T:Microsoft.Quantum.Simulation.Common.IQuantumProcessor"/> interface to be wrapped.</param>
            <param name="qubitManager">An instance of a class implementing <see cref="T:Microsoft.Quantum.Simulation.Common.IQubitManager"/> interface. If the parameter is null <see cref="T:Microsoft.Quantum.Simulation.Common.QubitManager"/> is used.</param>
            <param name="randomSeed">A seed to be used by Q# <a href="https://docs.microsoft.com/qsharp/api/qsharp/microsoft.quantum.intrinsic.random">Microsoft.Quantum.Intrinsic.Random</a> operation.</param>
            <param name="onlyOverrideBodyIntrinsic">A boolean that indicates whether only Q# callables that are defined as body intrinsic should be overridden. If false, the C# implementation will always override any Q# implementation. If true, the C# will only override Q# that does not have an implementation and is marked as body intrinsic. The value is false by default.</param>
        </member>
    </members>
</doc>
